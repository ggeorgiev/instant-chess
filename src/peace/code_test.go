package peace

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestCodeColor(t *testing.T) {
	assert.Equal(t, WhitePawn.Color(), WhiteColor)
	assert.Equal(t, WhiteBishop.Color(), WhiteColor)
	assert.Equal(t, WhiteKnight.Color(), WhiteColor)
	assert.Equal(t, WhiteRook.Color(), WhiteColor)
	assert.Equal(t, WhiteQueen.Color(), WhiteColor)
	assert.Equal(t, WhiteKing.Color(), WhiteColor)

	assert.Equal(t, BlackPawn.Color(), BlackColor)
	assert.Equal(t, BlackBishop.Color(), BlackColor)
	assert.Equal(t, BlackKnight.Color(), BlackColor)
	assert.Equal(t, BlackRook.Color(), BlackColor)
	assert.Equal(t, BlackQueen.Color(), BlackColor)
	assert.Equal(t, BlackKing.Color(), BlackColor)
}

func TestCodeIsWhite(t *testing.T) {
	assert.False(t, Null.IsWhite())
	assert.True(t, WhitePawn.IsWhite())
	assert.True(t, WhiteBishop.IsWhite())
	assert.True(t, WhiteKnight.IsWhite())
	assert.True(t, WhiteRook.IsWhite())
	assert.True(t, WhiteQueen.IsWhite())
	assert.True(t, WhiteKing.IsWhite())
	assert.False(t, BlackPawn.IsWhite())
	assert.False(t, BlackBishop.IsWhite())
	assert.False(t, BlackKnight.IsWhite())
	assert.False(t, BlackRook.IsWhite())
	assert.False(t, BlackQueen.IsWhite())
	assert.False(t, BlackKing.IsWhite())
}

func TestCodeIsBlack(t *testing.T) {
	assert.False(t, Null.IsBlack())
	assert.False(t, WhitePawn.IsBlack())
	assert.False(t, WhiteBishop.IsBlack())
	assert.False(t, WhiteKnight.IsBlack())
	assert.False(t, WhiteRook.IsBlack())
	assert.False(t, WhiteQueen.IsBlack())
	assert.False(t, WhiteKing.IsBlack())
	assert.True(t, BlackPawn.IsBlack())
	assert.True(t, BlackBishop.IsBlack())
	assert.True(t, BlackKnight.IsBlack())
	assert.True(t, BlackRook.IsBlack())
	assert.True(t, BlackQueen.IsBlack())
	assert.True(t, BlackKing.IsBlack())
}

func TestCodeIsNullOrNot(t *testing.T) {
	assert.True(t, Null.IsNullOrWhite())
	assert.True(t, WhitePawn.IsNullOrWhite())
	assert.True(t, WhiteBishop.IsNullOrWhite())
	assert.True(t, WhiteKnight.IsNullOrWhite())
	assert.True(t, WhiteRook.IsNullOrWhite())
	assert.True(t, WhiteQueen.IsNullOrWhite())
	assert.True(t, WhiteKing.IsNullOrWhite())
	assert.False(t, BlackPawn.IsNullOrWhite())
	assert.False(t, BlackBishop.IsNullOrWhite())
	assert.False(t, BlackKnight.IsNullOrWhite())
	assert.False(t, BlackRook.IsNullOrWhite())
	assert.False(t, BlackQueen.IsNullOrWhite())
	assert.False(t, BlackKing.IsNullOrWhite())

	assert.True(t, Null.IsNullOrBlack())
	assert.False(t, WhitePawn.IsNullOrBlack())
	assert.False(t, WhiteBishop.IsNullOrBlack())
	assert.False(t, WhiteKnight.IsNullOrBlack())
	assert.False(t, WhiteRook.IsNullOrBlack())
	assert.False(t, WhiteQueen.IsNullOrBlack())
	assert.False(t, WhiteKing.IsNullOrBlack())
	assert.True(t, BlackPawn.IsNullOrBlack())
	assert.True(t, BlackBishop.IsNullOrBlack())
	assert.True(t, BlackKnight.IsNullOrBlack())
	assert.True(t, BlackRook.IsNullOrBlack())
	assert.True(t, BlackQueen.IsNullOrBlack())
	assert.True(t, BlackKing.IsNullOrBlack())

	assert.True(t, Null.IsNullOrNot(WhiteColor))
	assert.False(t, WhitePawn.IsNullOrNot(WhiteColor))
	assert.False(t, WhiteBishop.IsNullOrNot(WhiteColor))
	assert.False(t, WhiteKnight.IsNullOrNot(WhiteColor))
	assert.False(t, WhiteRook.IsNullOrNot(WhiteColor))
	assert.False(t, WhiteQueen.IsNullOrNot(WhiteColor))
	assert.False(t, WhiteKing.IsNullOrNot(WhiteColor))
	assert.True(t, BlackPawn.IsNullOrNot(WhiteColor))
	assert.True(t, BlackBishop.IsNullOrNot(WhiteColor))
	assert.True(t, BlackKnight.IsNullOrNot(WhiteColor))
	assert.True(t, BlackRook.IsNullOrNot(WhiteColor))
	assert.True(t, BlackQueen.IsNullOrNot(WhiteColor))
	assert.True(t, BlackKing.IsNullOrNot(WhiteColor))

	assert.True(t, Null.IsNullOrNot(BlackColor))
	assert.True(t, WhitePawn.IsNullOrNot(BlackColor))
	assert.True(t, WhiteBishop.IsNullOrNot(BlackColor))
	assert.True(t, WhiteKnight.IsNullOrNot(BlackColor))
	assert.True(t, WhiteRook.IsNullOrNot(BlackColor))
	assert.True(t, WhiteQueen.IsNullOrNot(BlackColor))
	assert.True(t, WhiteKing.IsNullOrNot(BlackColor))
	assert.False(t, BlackPawn.IsNullOrNot(BlackColor))
	assert.False(t, BlackBishop.IsNullOrNot(BlackColor))
	assert.False(t, BlackKnight.IsNullOrNot(BlackColor))
	assert.False(t, BlackRook.IsNullOrNot(BlackColor))
	assert.False(t, BlackQueen.IsNullOrNot(BlackColor))
	assert.False(t, BlackKing.IsNullOrNot(BlackColor))
}

func TestCodeIsLinearMover(t *testing.T) {
	assert.False(t, Null.IsLinearMover())
	assert.False(t, WhitePawn.IsLinearMover())
	assert.False(t, WhiteBishop.IsLinearMover())
	assert.False(t, WhiteKnight.IsLinearMover())
	assert.True(t, WhiteRook.IsLinearMover())
	assert.True(t, WhiteQueen.IsLinearMover())
	assert.False(t, WhiteKing.IsLinearMover())
	assert.False(t, BlackPawn.IsLinearMover())
	assert.False(t, BlackBishop.IsLinearMover())
	assert.False(t, BlackKnight.IsLinearMover())
	assert.True(t, BlackRook.IsLinearMover())
	assert.True(t, BlackQueen.IsLinearMover())
	assert.False(t, BlackKing.IsLinearMover())

	assert.False(t, Null.IsLinearMoverFrom(WhiteColor))
	assert.False(t, WhitePawn.IsLinearMoverFrom(WhiteColor))
	assert.False(t, WhiteBishop.IsLinearMoverFrom(WhiteColor))
	assert.False(t, WhiteKnight.IsLinearMoverFrom(WhiteColor))
	assert.True(t, WhiteRook.IsLinearMoverFrom(WhiteColor))
	assert.True(t, WhiteQueen.IsLinearMoverFrom(WhiteColor))
	assert.False(t, WhiteKing.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackPawn.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackBishop.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackKnight.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackRook.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackQueen.IsLinearMoverFrom(WhiteColor))
	assert.False(t, BlackKing.IsLinearMoverFrom(WhiteColor))

	assert.False(t, Null.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhitePawn.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhiteBishop.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhiteKnight.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhiteRook.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhiteQueen.IsLinearMoverFrom(BlackColor))
	assert.False(t, WhiteKing.IsLinearMoverFrom(BlackColor))
	assert.False(t, BlackPawn.IsLinearMoverFrom(BlackColor))
	assert.False(t, BlackBishop.IsLinearMoverFrom(BlackColor))
	assert.False(t, BlackKnight.IsLinearMoverFrom(BlackColor))
	assert.True(t, BlackRook.IsLinearMoverFrom(BlackColor))
	assert.True(t, BlackQueen.IsLinearMoverFrom(BlackColor))
	assert.False(t, BlackKing.IsLinearMoverFrom(BlackColor))

	assert.False(t, Null.IsWhiteLinearMover())
	assert.False(t, WhitePawn.IsWhiteLinearMover())
	assert.False(t, WhiteBishop.IsWhiteLinearMover())
	assert.False(t, WhiteKnight.IsWhiteLinearMover())
	assert.True(t, WhiteRook.IsWhiteLinearMover())
	assert.True(t, WhiteQueen.IsWhiteLinearMover())
	assert.False(t, WhiteKing.IsWhiteLinearMover())
	assert.False(t, BlackPawn.IsWhiteLinearMover())
	assert.False(t, BlackBishop.IsWhiteLinearMover())
	assert.False(t, BlackKnight.IsWhiteLinearMover())
	assert.False(t, BlackRook.IsWhiteLinearMover())
	assert.False(t, BlackQueen.IsWhiteLinearMover())
	assert.False(t, BlackKing.IsWhiteLinearMover())

	assert.False(t, Null.IsBlackLinearMover())
	assert.False(t, WhitePawn.IsBlackLinearMover())
	assert.False(t, WhiteBishop.IsBlackLinearMover())
	assert.False(t, WhiteKnight.IsBlackLinearMover())
	assert.False(t, WhiteRook.IsBlackLinearMover())
	assert.False(t, WhiteQueen.IsBlackLinearMover())
	assert.False(t, WhiteKing.IsBlackLinearMover())
	assert.False(t, BlackPawn.IsBlackLinearMover())
	assert.False(t, BlackBishop.IsBlackLinearMover())
	assert.False(t, BlackKnight.IsBlackLinearMover())
	assert.True(t, BlackRook.IsBlackLinearMover())
	assert.True(t, BlackQueen.IsBlackLinearMover())
	assert.False(t, BlackKing.IsBlackLinearMover())

}

func TestCodeIsDiagonalMover(t *testing.T) {
	assert.False(t, Null.IsDiagonalMover())
	assert.False(t, WhitePawn.IsDiagonalMover())
	assert.True(t, WhiteBishop.IsDiagonalMover())
	assert.False(t, WhiteKnight.IsDiagonalMover())
	assert.False(t, WhiteRook.IsDiagonalMover())
	assert.True(t, WhiteQueen.IsDiagonalMover())
	assert.False(t, WhiteKing.IsDiagonalMover())
	assert.False(t, BlackPawn.IsDiagonalMover())
	assert.True(t, BlackBishop.IsDiagonalMover())
	assert.False(t, BlackKnight.IsDiagonalMover())
	assert.False(t, BlackRook.IsDiagonalMover())
	assert.True(t, BlackQueen.IsDiagonalMover())
	assert.False(t, BlackKing.IsDiagonalMover())

	assert.False(t, Null.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, WhitePawn.IsDiagonalMoverFrom(WhiteColor))
	assert.True(t, WhiteBishop.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, WhiteKnight.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, WhiteRook.IsDiagonalMoverFrom(WhiteColor))
	assert.True(t, WhiteQueen.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, WhiteKing.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackPawn.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackBishop.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackKnight.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackRook.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackQueen.IsDiagonalMoverFrom(WhiteColor))
	assert.False(t, BlackKing.IsDiagonalMoverFrom(WhiteColor))

	assert.False(t, Null.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhitePawn.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhiteBishop.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhiteKnight.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhiteRook.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhiteQueen.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, WhiteKing.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, BlackPawn.IsDiagonalMoverFrom(BlackColor))
	assert.True(t, BlackBishop.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, BlackKnight.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, BlackRook.IsDiagonalMoverFrom(BlackColor))
	assert.True(t, BlackQueen.IsDiagonalMoverFrom(BlackColor))
	assert.False(t, BlackKing.IsDiagonalMoverFrom(BlackColor))
}

func TestCodeIsBishop(t *testing.T) {
	assert.False(t, Null.IsBishop())
	assert.False(t, WhitePawn.IsBishop())
	assert.True(t, WhiteBishop.IsBishop())
	assert.False(t, WhiteKnight.IsBishop())
	assert.False(t, WhiteRook.IsBishop())
	assert.False(t, WhiteQueen.IsBishop())
	assert.False(t, WhiteKing.IsBishop())
	assert.False(t, BlackPawn.IsBishop())
	assert.True(t, BlackBishop.IsBishop())
	assert.False(t, BlackKnight.IsBishop())
	assert.False(t, BlackRook.IsBishop())
	assert.False(t, BlackQueen.IsBishop())
	assert.False(t, BlackKing.IsBishop())
}

func TestCodeIsKnight(t *testing.T) {
	assert.False(t, Null.IsKnight())
	assert.False(t, WhitePawn.IsKnight())
	assert.False(t, WhiteBishop.IsKnight())
	assert.True(t, WhiteKnight.IsKnight())
	assert.False(t, WhiteRook.IsKnight())
	assert.False(t, WhiteQueen.IsKnight())
	assert.False(t, WhiteKing.IsKnight())
	assert.False(t, BlackPawn.IsKnight())
	assert.False(t, BlackBishop.IsKnight())
	assert.True(t, BlackKnight.IsKnight())
	assert.False(t, BlackRook.IsKnight())
	assert.False(t, BlackQueen.IsKnight())
	assert.False(t, BlackKing.IsKnight())
}

func TestCodeIsRook(t *testing.T) {
	assert.False(t, Null.IsRook())
	assert.False(t, WhitePawn.IsRook())
	assert.False(t, WhiteBishop.IsRook())
	assert.False(t, WhiteKnight.IsRook())
	assert.True(t, WhiteRook.IsRook())
	assert.False(t, WhiteQueen.IsRook())
	assert.False(t, WhiteKing.IsRook())
	assert.False(t, BlackPawn.IsRook())
	assert.False(t, BlackBishop.IsRook())
	assert.False(t, BlackKnight.IsRook())
	assert.True(t, BlackRook.IsRook())
	assert.False(t, BlackQueen.IsRook())
	assert.False(t, BlackKing.IsRook())
}

func TestCodeIsQueen(t *testing.T) {
	assert.False(t, Null.IsQueen())
	assert.False(t, WhitePawn.IsQueen())
	assert.False(t, WhiteBishop.IsQueen())
	assert.False(t, WhiteKnight.IsQueen())
	assert.False(t, WhiteRook.IsQueen())
	assert.True(t, WhiteQueen.IsQueen())
	assert.False(t, WhiteKing.IsQueen())
	assert.False(t, BlackPawn.IsQueen())
	assert.False(t, BlackBishop.IsQueen())
	assert.False(t, BlackKnight.IsQueen())
	assert.False(t, BlackRook.IsQueen())
	assert.True(t, BlackQueen.IsQueen())
	assert.False(t, BlackKing.IsQueen())
}

func TestCodeIsKing(t *testing.T) {
	assert.False(t, Null.IsKing())
	assert.False(t, WhitePawn.IsKing())
	assert.False(t, WhiteBishop.IsKing())
	assert.False(t, WhiteKnight.IsKing())
	assert.False(t, WhiteRook.IsKing())
	assert.False(t, WhiteQueen.IsKing())
	assert.True(t, WhiteKing.IsKing())
	assert.False(t, BlackPawn.IsKing())
	assert.False(t, BlackBishop.IsKing())
	assert.False(t, BlackKnight.IsKing())
	assert.False(t, BlackRook.IsKing())
	assert.False(t, BlackQueen.IsKing())
	assert.True(t, BlackKing.IsKing())
}
