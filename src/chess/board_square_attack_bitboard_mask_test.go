package chess

import (
	"testing"

	"github.com/ggeorgiev/instant-chess/src/peace"
	"github.com/ggeorgiev/instant-chess/src/square"
	"github.com/stretchr/testify/assert"
)

func TestAttackBitboardMaskFromNonLinear(t *testing.T) {
	position := ParsePosition(`
    a   b   c   d   e   f   g   h
  +---+---+---+---+---+---+---+---+
8 |   |   |   |   |   |   |   |   | 8
  +---+---+---+---+---+---+---+---+
7 |   |   |   |   |   |   |   |   | 7
  +---+---+---+---+---+---+---+---+
6 |   |   |   |   | ♘ |   |   |   | 6
  +---+---+---+---+---+---+---+---+
5 |   |   |   |   |   |   | ♙ |   | 5
  +---+---+---+---+---+---+---+---+
4 | ♘ |   |   | ♔ |   |   |   |   | 4
  +---+---+---+---+---+---+---+---+
3 |   |   |   |   |   |   |   |   | 3
  +---+---+---+---+---+---+---+---+
2 |   | ♚ |   |   |   |   |   | ♙ | 2
  +---+---+---+---+---+---+---+---+
1 |   |   |   |   |   |   |   |   | 1
  +---+---+---+---+---+---+---+---+
    a   b   c   d   e   f   g   h
`)

	expected := `
····a···b···c···d···e···f···g···h····
··+---+---+---+---+---+---+---+---+··
8·|   |   |   | ● |   | ● |   |   |·8
··+---+---+---+---+---+---+---+---+··
7·|   |   | ● |   |   |   | ● |   |·7
··+---+---+---+---+---+---+---+---+··
6·|   | ● |   |   |   | ● |   | ● |·6
··+---+---+---+---+---+---+---+---+··
5·|   |   | ● | ● | ● |   |   |   |·5
··+---+---+---+---+---+---+---+---+··
4·|   |   | ● |   | ● | ● |   |   |·4
··+---+---+---+---+---+---+---+---+··
3·|   |   | ● | ● | ● |   | ● |   |·3
··+---+---+---+---+---+---+---+---+··
2·|   | ● |   |   |   |   |   |   |·2
··+---+---+---+---+---+---+---+---+··
1·|   |   |   |   |   |   |   |   |·1
··+---+---+---+---+---+---+---+---+··
····a···b···c···d···e···f···g···h····
`

	mask := "\n" + square.SprintMask(position.Board.AttackBitboardMaskFrom(peace.WhiteColor))

	assert.Equal(t, expected, mask, mask)
}

func TestAttackBitboardMaskFromDiagonals(t *testing.T) {
	position := ParsePosition(`
    a   b   c   d   e   f   g   h
  +---+---+---+---+---+---+---+---+
8 |   |   |   |   |   |   |   |   | 8
  +---+---+---+---+---+---+---+---+
7 |   |   |   |   |   | ♞ |   |   | 7
  +---+---+---+---+---+---+---+---+
6 |   |   | ♞ |   |   |   |   |   | 6
  +---+---+---+---+---+---+---+---+
5 |   |   |   | ♗ |   |   |   |   | 5
  +---+---+---+---+---+---+---+---+
4 |   |   |   |   |   |   |   |   | 4
  +---+---+---+---+---+---+---+---+
3 |   | ♞ |   |   |   |   |   |   | 3
  +---+---+---+---+---+---+---+---+
2 |   |   |   |   |   |   | ♚ |   | 2
  +---+---+---+---+---+---+---+---+
1 |   |   |   | ♔ |   |   |   |   | 1
  +---+---+---+---+---+---+---+---+
    a   b   c   d   e   f   g   h
`)

	expected := `
····a···b···c···d···e···f···g···h····
··+---+---+---+---+---+---+---+---+··
8·|   |   |   |   |   |   |   |   |·8
··+---+---+---+---+---+---+---+---+··
7·|   |   |   |   |   | ● |   |   |·7
··+---+---+---+---+---+---+---+---+··
6·|   |   | ● |   | ● |   |   |   |·6
··+---+---+---+---+---+---+---+---+··
5·|   |   |   |   |   |   |   |   |·5
··+---+---+---+---+---+---+---+---+··
4·|   |   | ● |   | ● |   |   |   |·4
··+---+---+---+---+---+---+---+---+··
3·|   | ● |   |   |   | ● |   |   |·3
··+---+---+---+---+---+---+---+---+··
2·|   |   | ● | ● | ● |   | ● |   |·2
··+---+---+---+---+---+---+---+---+··
1·|   |   | ● |   | ● |   |   |   |·1
··+---+---+---+---+---+---+---+---+··
····a···b···c···d···e···f···g···h····
`

	mask := "\n" + square.SprintMask(position.Board.AttackBitboardMaskFrom(peace.WhiteColor))

	assert.Equal(t, expected, mask, mask)
}

func TestAttackBitboardMaskFromLinears(t *testing.T) {
	position := ParsePosition(`
    a   b   c   d   e   f   g   h
  +---+---+---+---+---+---+---+---+
8 |   |   |   |   |   |   |   |   | 8
  +---+---+---+---+---+---+---+---+
7 |   |   |   | ♞ |   |   |   |   | 7
  +---+---+---+---+---+---+---+---+
6 |   |   |   |   |   |   |   |   | 6
  +---+---+---+---+---+---+---+---+
5 |   |   | ♞ | ♖ |   |   | ♚ |   | 5
  +---+---+---+---+---+---+---+---+
4 |   |   |   |   |   |   |   |   | 4
  +---+---+---+---+---+---+---+---+
3 |   |   |   | ♞ |   |   |   |   | 3
  +---+---+---+---+---+---+---+---+
2 |   |   |   |   |   |   |   |   | 2
  +---+---+---+---+---+---+---+---+
1 | ♔ |   |   |   |   |   |   |   | 1
  +---+---+---+---+---+---+---+---+
    a   b   c   d   e   f   g   h
`)

	expected := `
····a···b···c···d···e···f···g···h····
··+---+---+---+---+---+---+---+---+··
8·|   |   |   |   |   |   |   |   |·8
··+---+---+---+---+---+---+---+---+··
7·|   |   |   | ● |   |   |   |   |·7
··+---+---+---+---+---+---+---+---+··
6·|   |   |   | ● |   |   |   |   |·6
··+---+---+---+---+---+---+---+---+··
5·|   |   | ● |   | ● | ● | ● |   |·5
··+---+---+---+---+---+---+---+---+··
4·|   |   |   | ● |   |   |   |   |·4
··+---+---+---+---+---+---+---+---+··
3·|   |   |   | ● |   |   |   |   |·3
··+---+---+---+---+---+---+---+---+··
2·| ● | ● |   |   |   |   |   |   |·2
··+---+---+---+---+---+---+---+---+··
1·|   | ● |   |   |   |   |   |   |·1
··+---+---+---+---+---+---+---+---+··
····a···b···c···d···e···f···g···h····
`

	mask := "\n" + square.SprintMask(position.Board.AttackBitboardMaskFrom(peace.WhiteColor))

	assert.Equal(t, expected, mask, mask)
}
