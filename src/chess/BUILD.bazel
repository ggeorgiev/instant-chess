load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template_rule")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")

expand_template_rule(
    name = "board_color_template",
    out = "board_color.tmpl",
    substitutions = {
        "White": "{Color}",
        "Black": "{OpositeColor}",
    },
    template = "board_white.go",
)

expand_template_rule(
    name = "board_black",
    out = "board_black.go.gen",
    substitutions = {
        "{Color}": "Black",
        "{OpositeColor}": "White",
    },
    template = ":board_color_template",
)

write_source_files(
    name = "templates",
    files = {
        "board_black.go": ":board_black",
    },
)

go_library(
    name = "chess",
    srcs = [
        "board.go",
        "board_black.go",
        "board_white.go",
        "generator.go",
        "move.go",
        "position.go",
        "result.go",
    ],
    importpath = "github.com/ggeorgiev/instant-chess/src/chess",
    visibility = ["//visibility:public"],
    deps = [
        "//src/bitboard",
        "//src/board",
        "//src/math",
        "//src/peace",
        "//src/peaceattacks",
        "//src/peacemoves",
        "//src/square",
        "//src/util",
    ],
)

go_test(
    name = "chess_test",
    size = "large",
    srcs = [
        "board_move_benchmark_test.go",
        "board_move_test.go",
        "board_square_attack_bitboard_mask_benchmark_test.go",
        "board_square_attack_bitboard_mask_test.go",
        "board_square_under_attack_benchmark_test.go",
        "board_square_under_attack_test.go",
        "generator_test.go",
        "move_test.go",
        "position_peaces_count_test.go",
        "position_test.go",
        "position_valid_black_king_under_attack_test.go",
        "position_valid_kings_test.go",
    ],
    embed = [":chess"],
    deps = [
        "//src/peace",
        "//src/square",
        "@com_github_stretchr_testify//assert",
    ],
)
